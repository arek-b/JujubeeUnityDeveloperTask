//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""WeaponControls"",
            ""id"": ""4f698e54-106c-448b-aa68-777adbe80aa8"",
            ""actions"": [
                {
                    ""name"": ""UseWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""cd9aeea0-c12f-4c75-80a8-37cd8d451a11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""d46daafe-174a-4e1a-9386-3326fc741162"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f10d999-d61e-4730-9f3a-95abb80592ff"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac7a8c77-3077-43cf-a4ce-97de727f5e89"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // WeaponControls
            m_WeaponControls = asset.FindActionMap("WeaponControls", throwIfNotFound: true);
            m_WeaponControls_UseWeapon = m_WeaponControls.FindAction("UseWeapon", throwIfNotFound: true);
            m_WeaponControls_NextWeapon = m_WeaponControls.FindAction("NextWeapon", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // WeaponControls
        private readonly InputActionMap m_WeaponControls;
        private List<IWeaponControlsActions> m_WeaponControlsActionsCallbackInterfaces = new List<IWeaponControlsActions>();
        private readonly InputAction m_WeaponControls_UseWeapon;
        private readonly InputAction m_WeaponControls_NextWeapon;
        public struct WeaponControlsActions
        {
            private @Controls m_Wrapper;
            public WeaponControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @UseWeapon => m_Wrapper.m_WeaponControls_UseWeapon;
            public InputAction @NextWeapon => m_Wrapper.m_WeaponControls_NextWeapon;
            public InputActionMap Get() { return m_Wrapper.m_WeaponControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WeaponControlsActions set) { return set.Get(); }
            public void AddCallbacks(IWeaponControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Add(instance);
                @UseWeapon.started += instance.OnUseWeapon;
                @UseWeapon.performed += instance.OnUseWeapon;
                @UseWeapon.canceled += instance.OnUseWeapon;
                @NextWeapon.started += instance.OnNextWeapon;
                @NextWeapon.performed += instance.OnNextWeapon;
                @NextWeapon.canceled += instance.OnNextWeapon;
            }

            private void UnregisterCallbacks(IWeaponControlsActions instance)
            {
                @UseWeapon.started -= instance.OnUseWeapon;
                @UseWeapon.performed -= instance.OnUseWeapon;
                @UseWeapon.canceled -= instance.OnUseWeapon;
                @NextWeapon.started -= instance.OnNextWeapon;
                @NextWeapon.performed -= instance.OnNextWeapon;
                @NextWeapon.canceled -= instance.OnNextWeapon;
            }

            public void RemoveCallbacks(IWeaponControlsActions instance)
            {
                if (m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWeaponControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_WeaponControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WeaponControlsActions @WeaponControls => new WeaponControlsActions(this);
        public interface IWeaponControlsActions
        {
            void OnUseWeapon(InputAction.CallbackContext context);
            void OnNextWeapon(InputAction.CallbackContext context);
        }
    }
}
